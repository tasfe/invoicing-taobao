<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- 采用注释的方式配置bean -->
	<context:annotation-config />
	<context:component-scan base-package="com.taobao.*" />
	<bean id="configBean"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	<!-- 数据源配置 使用c3p0 -->
	<bean class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" id="dataSource">
		<property value="${jdbc.driver}" name="driverClass" />
		<property value="${jdbc.url}" name="jdbcUrl" />
		<property value="${jdbc.username}" name="user" />
		<property value="${jdbc.password}" name="password" />
		<property value="${jdbc.acquireIncrement}" name="acquireIncrement" />
		<property value="${jdbc.initialPoolSize}" name="initialPoolSize" />
		<property value="${jdbc.minPoolSize}" name="minPoolSize" />
		<property value="${jdbc.maxPoolSize}" name="maxPoolSize" />
		<property value="${jdbc.maxIdleTime}" name="maxIdleTime" />
		<property value="${jdbc.maxStatements}" name="maxStatements" />
		<property value="${jdbc.numHelperThreads}" name="numHelperThreads" />
		<property value="${jdbc.idleConnectionTestPeriod}" name="idleConnectionTestPeriod" />
	</bean>

	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation">
			<value>classpath:mybatis-config.xml</value>
		</property>
		<property name="plugins">
			<array>
				<ref bean="paginationInterceptor"/>
			</array>
		</property>
	</bean>
	
	<bean id="paginationInterceptor" class="com.taobao.page.dialect.PaginationInterceptor"></bean>
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<constructor-arg index="1" value="BATCH" /><!--如果想要进行批量操作可加入这个属性 -->
	</bean>
	<!-- 配置SqlSessionTemplate -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	

	<!-- 事务管理器配置，单数据源事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 配置事务的传播特性 -->
	<bean id="baseTransactionProxy"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
		abstract="true">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="add*">PROPAGATION_REQUIRED</prop>
				<prop key="edit*">PROPAGATION_REQUIRED</prop>
				<prop key="remove*">PROPAGATION_REQUIRED</prop>
				<prop key="insert*">PROPAGATION_REQUIRED</prop>
				<prop key="update*">PROPAGATION_REQUIRED</prop>
				<prop key="del*">PROPAGATION_REQUIRED</prop>
				<prop key="cancel*">PROPAGATION_REQUIRED</prop>
				<prop key="*">readOnly</prop>
			</props>
		</property>
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
</beans>
